class Solution {
    private static final int[][] moves = {
        {2, 1}, {2, -1}, {-2, 1}, {-2, -1},
        {1, 2}, {1, -2}, {-1, 2}, {-1, -2}
    };

    public double knightProbability(int n, int k, int row, int column) {
        // dp[row][col][k] stores probability of staying on board
        Double[][][] dp = new Double[n][n][k + 1];
        return dfs(n, k, row, column, dp);
    }

    private double dfs(int n, int k, int row, int col, Double[][][] dp) {
        // Outside board → invalid path
        if (row < 0 || row >= n || col < 0 || col >= n) return 0.0;

        // No moves left, knight is still inside → success
        if (k == 0) return 1.0;

        // Already computed? Return cached result
        if (dp[row][col][k] != null) return dp[row][col][k];

        // Try all 8 knight moves
        double prob = 0.0;
        for (int[] move : moves) {
            int newRow = row + move[0];
            int newCol = col + move[1];
            prob += dfs(n, k - 1, newRow, newCol, dp) / 8.0;
        }

        // Store and return
        dp[row][col][k] = prob;
        return prob;
    }
}
